\begin{zed} CHARS == \seq \nat  \end{zed} \begin{zed} FLOAT == \num  \end{zed} \begin{zed} DATE == \nat  \end{zed} \begin{zed} TIME == \nat  \end{zed} \begin{axdef}   today: DATE \end{axdef} \begin{axdef}   now: TIME \end{axdef} \begin{zed} [SOURCE] \end{zed} \begin{axdef}   default\_source: SOURCE \end{axdef} \begin{schema}{HEADER }  creating\_date, updating\_date: DATE \\   host\_id: \nat  \\   sync\_source: SOURCE \end{schema} \begin{schema}{SESSIONREC }  session\_date: DATE \\   session\_number: \nat  \end{schema} SESSIONS \defs [~sessions: \power SESSIONREC ~] \begin{schema}{CURRENCY }  iso\_code: CHARS \\   usd\_ratio: FLOAT \end{schema} \begin{axdef}   usd\_currency: CURRENCY \end{axdef} \begin{schema}{CURRENCYDATA }  currencies: \power CURRENCY \\ \where \\   currencies \neq \empty \\   usd\_currency \in currencies \\   \forall x, y: currencies @ x.iso\_code = y.iso\_code \implies x = y \end{schema} \begin{schema}{STOCKREC }  name, symbol: CHARS \\   currency: CURRENCY \\   source\_id: SOURCE \\   mod\_date: DATE \\   mod\_time: TIME \end{schema} \begin{schema}{STOCKS }  CURRENCYDATA \\   stock\_ids: \power STOCKREC \\ \where \\   \forall x: STOCKREC @ x \in stock\_ids \implies x.currency \in currencies \end{schema} \begin{zed} VALTYPE ::= OPEN | CLOSE | MAX | MIN | VOL \end{zed} \begin{zed} STOCKTYPE ::= DAILY | INTRADAY \end{zed} \begin{zed} VALUES == VALTYPE \fun FLOAT \end{zed} \begin{zed} STOCKDAILYPOINTS == SESSIONREC \pfun VALUES \end{zed} \begin{zed} STOCKINTRAPOINTS == SESSIONREC \pfun TIME \cross VALUES \end{zed} \begin{schema}{STOCKDATA }  STOCKS \\   SESSIONS \\   daily\_data: STOCKREC \pfun STOCKDAILYPOINTS \\   intra\_data: STOCKREC \pfun STOCKINTRAPOINTS \\ \where \\   \dom daily\_data \subseteq stock\_ids \\   \dom intra\_data \subseteq stock\_ids \\   \forall x: \ran daily\_data @ \dom x \subseteq sessions \\   \forall x: \ran intra\_data @ \dom x \subseteq sessions \end{schema} \begin{zed} ALARMTYPE ::= MORE | MOREEQ | EQ | LESS | LESSEQ \end{zed} \begin{schema}{ALARMREC }  trigger\_val: ALARMTYPE \cross VALTYPE \cross FLOAT \end{schema} \begin{schema}{ALARMDATA }  STOCKS \\   alarms: STOCKREC \pfun \power ALARMREC \\ \where \\   \dom alarms \subseteq stock\_ids \end{schema} \begin{zed} TRANSTYPE ::= BUY | SELL \end{zed} \begin{schema}{TRANSACTIONREC }  trans\_date: DATE \\   trans\_price, trans\_fee, profit, buy\_price: FLOAT \\   trans\_amount: \nat  \\   mod\_date: DATE \\   mod\_time: TIME \end{schema} \begin{schema}{TRANSDATA }  STOCKS \\   transactions: STOCKREC \pfun \power (TRANSTYPE \cross TRANSACTIONREC) \\ \where \\   \dom transactions \subseteq stock\_ids \end{schema} \begin{schema}{PORTFOLIOREC }  portfolio\_name: CHARS \end{schema} PORTFOLIO \defs PORTFOLIOREC \land STOCKDATA \land ALARMDATA \land TRANSDATA CurrenciesInit \defs [~CURRENCYDATA' | currencies' = \{usd\_currency\} ~] StockDataInit \defs   [~STOCKDATA'    | stock\_ids' = \empty \land sessions' = \empty \land daily\_data' = \empty \land intra\_data' = \empty ~] AlarmDataInit \defs [~ALARMDATA' | alarms' = \empty ~] TransDataInit \defs [~TRANSDATA' | transactions' = \empty ~] PortfolioRecInit \defs [~PORTFOLIOREC' | portfolio\_name' = \langle \rangle  ~] PortfolioInit \defs   CurrenciesInit   \land StockDataInit   \land AlarmDataInit   \land TransDataInit   \land PortfolioRecInit \begin{schema}{AddCurrency }  \Delta PORTFOLIO \\   isocode?: CHARS \\   usdratio?: FLOAT \\ \where \\   \lnot (\exists x: CURRENCY @ x.iso\_code = isocode?) \\   currencies' \\     = currencies \bigcup \{\theta  CURRENCY[iso\_code := \langle \rangle , usd\_ratio := usdratio?]\} \end{schema} \begin{schema}{FindCurrency }  \Xi PORTFOLIO \\   isocode?: CHARS \\   out!: CURRENCY \\ \where \\   \exists_1x: currencies @ x.iso\_code = isocode? \\   out! = (?x: currencies | x.iso\_code = isocode?) \end{schema} GetRatio \defs   [~currency?: CURRENCY; ratio!: FLOAT | ratio! = currency?.usd\_ratio ~] GetCurrencyRatio \defs FindCurrency ? GetRatio[out!/currency?] \begin{schema}{DeleteCurrencyBindings }  \Delta PORTFOLIO \\   currency?: CURRENCY \\ \where \\   currency? \in currencies \\   \forall x: stock\_ids @ x.currency \neq currency? \\   currencies' = currencies \setminus \{currency?\} \end{schema} DeleteCurrency \defs FindCurrency ? DeleteCurrencyBindings[out!/currency?] \begin{schema}{AddDailyData }  \Delta PORTFOLIO \\   stock?: STOCKREC \\   session?: SESSIONREC \\   vals?: VALUES \\ \where \\   stock? \in stock\_ids \\   stock? \notin \dom daily\_data \\   sessions' = sessions \bigcup \{session?\} \\   daily\_data' = daily\_data ? \{(stock? ? \{(session? ? vals?)\})\} \end{schema} \begin{schema}{UpdateDailyData }  \Delta PORTFOLIO \\   stock?: STOCKREC \\   session?: SESSIONREC \\   vals?: VALUES \\ \where \\   stock? \in stock\_ids \\   stock? \in \dom daily\_data \\   sessions' = sessions \bigcup \{session?\} \\   daily\_data' \\     = daily\_data ? \{(stock? ? daily\_data stock? \bigcup \{(session? ? vals?)\})\} \end{schema} AddDailyPoint \defs AddDailyData \lor UpdateDailyData \begin{schema}{AddIntradayData }  \Delta PORTFOLIO \\   stock?: STOCKREC \\   session?: SESSIONREC \\   time?: TIME \\   vals?: VALUES \\ \where \\   stock? \in stock\_ids \\   stock? \notin \dom intra\_data \\   sessions' = sessions \bigcup \{session?\} \\   intra\_data' = intra\_data ? \{(stock? ? \{(session? ? (time? ? vals?))\})\} \end{schema} \begin{schema}{UpdateIntradayData }  \Delta PORTFOLIO \\   stock?: STOCKREC \\   session?: SESSIONREC \\   time?: TIME \\   vals?: VALUES \\ \where \\   stock? \in stock\_ids \\   stock? \in \dom intra\_data \\   sessions' = sessions \bigcup \{session?\} \\   intra\_data' \\     = intra\_data \\       ? \{(stock? ? intra\_data stock? \bigcup \{(session? ? (time? ? vals?))\})\} \end{schema} AddIntradayPoint \defs AddIntradayData \lor UpdateIntradayData \begin{schema}{DeletePointsForStock }  \Delta PORTFOLIO \\   stock?: STOCKREC \\ \where \\   daily\_data' = \{stock?\} ? daily\_data \\   intra\_data' = \{stock?\} ? intra\_data \end{schema} \begin{schema}{GetDailyValues }  \Xi PORTFOLIO \\   stock?: STOCKREC \\   session?: SESSIONREC \\   vals!: VALUES \\ \where \\   stock? \in \dom daily\_data \\   session? \in \dom (daily\_data stock?) \\   (daily\_data stock?, session?) \in applies$to \\   daily\_data stock? session? \in VALUES \\   vals! = (?x: VALUES | x = daily\_data stock? session?) \end{schema} \begin{schema}{FindSession }  \Xi PORTFOLIO \\   date?: DATE \\   out!: SESSIONREC \\ \where \\   \exists_1x: sessions @ x.session\_date = date? \\   out! = (?x: sessions | x.session\_date = date?) \end{schema} GetDailyValuesByDate \defs FindSession ? GetDailyValues[out!/session?] \begin{axdef}   active\_alarm\_values: \power (ALARMREC \cross VALUES) \end{axdef} \begin{schema}{AddAlarmData }  \Delta PORTFOLIO \\   alarm?: ALARMREC \\   stock?: STOCKREC \\ \where \\   stock? \in stock\_ids \\   stock? \notin \dom alarms \\   alarms' = alarms ? \{(stock? ? \{alarm?\})\} \end{schema} \begin{schema}{UpdateAlarmData }  \Delta PORTFOLIO \\   alarm?: ALARMREC \\   stock?: STOCKREC \\ \where \\   stock? \in stock\_ids \\   stock? \in \dom alarms \\   alarms' = alarms ? \{(stock? ? alarms stock? \bigcup \{alarm?\})\} \end{schema} AddAlarm \defs AddAlarmData \lor UpdateAlarmData \begin{schema}{IsStockActiveForVals }  \Xi PORTFOLIO \\   stock?: STOCKREC \\   vals?: VALUES \\ \where \\   \exists arec: ALARMREC \\      @ stock? \in \dom alarms \land arec \in alarms stock? \\        \implies arec ? vals? \in active\_alarm\_values \end{schema} IsStockActive \defs GetDailyValues ? IsStockActiveForVals[vals!/vals?] \begin{schema}{DeleteAlarmsForStock }  \Delta PORTFOLIO \\   stock?: STOCKREC \\ \where \\   alarms' = \{stock?\} ? alarms \end{schema} \begin{schema}{MarkTransactionTimestamp }  \Delta TRANSACTIONREC \\ \where \\   mod\_date' = today \\   mod\_time' = now \end{schema} \begin{schema}{DoTransaction }  \Delta PORTFOLIO \\   stock?: STOCKREC \\   record?: TRANSACTIONREC \\   type?: TRANSTYPE \\   merged: \power (TRANSTYPE \cross TRANSACTIONREC) \\ \where \\   \IF stock? \in \dom transactions \\   \THEN merged = transactions stock? \bigcup \{(type? ? record?)\} \\   \ELSE merged = \{type? ? record?\} \\   transactions' = transactions ? \{(stock? ? merged)\} \end{schema} Buy \defs MarkTransactionTimestamp ? DoTransaction[type? := BUY] Sell \defs MarkTransactionTimestamp ? DoTransaction[type? := SELL] \begin{schema}{DeleteTransactionsForStock }  \Delta PORTFOLIO \\   stock?: STOCKREC \\ \where \\   transactions' = \{stock?\} ? transactions \end{schema} \begin{schema}{AddStock }  \Delta PORTFOLIO \\   myname?, mysymbol?: CHARS \\ \where \\   stock\_ids' \\     = stock\_ids \\       \bigcup \{STOCKREC[name := myname?, symbol := mysymbol?, \\                   currency := usd\_currency, source\_id := default\_source, \\                   mod\_date := 0, mod\_time := 0]\} \end{schema} \begin{schema}{DeleteStockData }  \Delta PORTFOLIO \\   stock?: STOCKREC \\ \where \\   stock\_ids' = stock\_ids \setminus \{stock?\} \end{schema} DeleteStock \defs   DeleteStockData   \land DeletePointsForStock   \land DeleteAlarmsForStock   \land DeleteTransactionsForStock \begin{schema}{SetStockName }  \Delta PORTFOLIO \\   newname?: CHARS \\ \where \\   portfolio\_name' = newname? \end{schema} 